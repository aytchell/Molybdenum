#ifndef MOLYBDENUM_PSQT_H
#define MOLYBDENUM_PSQT_H

#include <array>
#include "Constants.h"
#include "BitStuff.h"


constexpr int PawnValueMG   = 0;
constexpr int KnightValueMG = 0;
constexpr int BishopValueMG = 0;
constexpr int RookValueMG   = 0;
constexpr int QueenValueMG  = 0;

constexpr int PawnValueEG   = 0;
constexpr int KnightValueEG = 0;
constexpr int BishopValueEG = 0;
constexpr int RookValueEG   = 0;
constexpr int QueenValueEG  = 0;

constexpr int TempoMG = 25;
constexpr int TempoEG = 20;


constexpr std::array<int, 6> PieceValuesMG = {PawnValueMG, KnightValueMG, BishopValueMG, RookValueMG, QueenValueMG, 0};
constexpr std::array<int, 6> PieceValuesEG = {PawnValueEG, KnightValueEG, BishopValueEG, RookValueEG, QueenValueEG, 0};

constexpr std::array<int, 6> gamePhaseValues = {0, 2, 3, 5, 10, 0};
constexpr int maxPhase =   gamePhaseValues[KNIGHT] * 4
                         + gamePhaseValues[BISHOP] * 4
                         + gamePhaseValues[ROOK  ] * 4
                         + gamePhaseValues[QUEEN ] * 2;

constexpr std::array<std::array<int, 64>, 6> PieceSquareBonusesMG {{
    //Pawn
         //A8
        {0,    0,    0,    0,    0,    0,    0,    0,
         133,  161,  136,  162,  139,  114,   94,   37,
         73,   95,  128,  130,  132,  157,  145,   85,
         54,   82,   86,   87,  111,   99,  103,   75,
         40,   72,   69,   89,   87,   76,   85,   60,
         38,   67,   66,   67,   83,   68,  103,   68,
         36,   68,   60,   50,   71,   87,  112,   58,
         0,    0,    0,    0,    0,    0,    0,    0, },

     //Knight
        { 192,   68,  146,  171,  163,  158,   55,  193,
          264,  299,  325,  326,  310,  387,  266,  295,
          274,  329,  356,  368,  408,  393,  355,  306,
          285,  305,  333,  359,  337,  366,  317,  327,
          272,  285,  308,  310,  321,  314,  311,  285,
          248,  276,  291,  295,  309,  297,  302,  268,
          232,  243,  265,  281,  282,  284,  267,  267,
          151,  244,  226,  245,  252,  266,  248,  199, },

      //Bishop
        { 306,  212,  199,  215,  185,  224,  149,  245,
          324,  355,  340,  298,  349,  344,  341,  320,
          330,  354,  359,  385,  362,  399,  369,  365,
          320,  337,  363,  375,  374,  365,  338,  324,
          310,  328,  334,  361,  357,  337,  330,  322,
          325,  333,  333,  335,  337,  332,  336,  339,
          325,  328,  342,  315,  324,  340,  346,  332,
          294,  324,  305,  292,  298,  299,  318,  312, },

       //Rook
        { 412,  380,  393,  398,  411,  349,  327,  418,
          421,  422,  439,  457,  440,  470,  440,  473,
          396,  415,  425,  428,  455,  451,  466,  457,
          377,  390,  396,  408,  415,  410,  406,  416,
          356,  356,  369,  386,  387,  367,  386,  381,
          349,  357,  368,  368,  375,  371,  408,  385,
          346,  357,  376,  372,  377,  380,  396,  365,
          365,  369,  381,  387,  392,  378,  396,  366,},

       //Queen
        { 712,  687,  716,  745,  751,  725,  767,  751,
          770,  751,  756,  749,  758,  794,  784,  821,
          768,  766,  771,  785,  781,  837,  833,  828,
          752,  752,  762,  763,  764,  777,  771,  782,
          748,  751,  746,  759,  760,  752,  767,  769,
          748,  753,  748,  745,  749,  756,  772,  769,
          745,  749,  759,  759,  756,  768,  779,  816,
          740,  729,  736,  750,  744,  727,  799,  797, },

       //King
        {   0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  -21,  -19,  -12,    0,   -5,
            -16,   -9,  -25,  -52,  -69,  -43,  -34,  -31,
            -16,   -3,  -40,  -53,  -37,  -36,   14,   -7,
            81,   54,   40,    9,    5,   27,   79,   88,
            85,  125,   93,  -11,   54,   12,  105,  105, },
}};

constexpr std::array<std::array<int, 64>, 6> PieceSquareBonusesEG {{
     //Pawn
        //A8
        {   0,    0,    0,    0,    0,    0,    0,    0,
            290,  276,  280,  232,  230,  236,  261,  286,
            227,  233,  196,  176,  169,  154,  198,  200,
            160,  147,  125,  116,  107,  112,  131,  134,
            134,  130,  110,  107,  106,  107,  120,  113,
            128,  128,  110,  121,  115,  113,  117,  109,
            135,  133,  118,  119,  133,  119,  118,  112,
            0,    0,    0,    0,    0,    0,    0,    0},

         //Knight
        { 186,  282,  312,  305,  317,  271,  266,  163,
          280,  298,  306,  309,  296,  283,  296,  258,
          300,  310,  326,  327,  309,  309,  294,  281,
          303,  326,  341,  341,  344,  336,  325,  294,
          306,  319,  342,  343,  345,  333,  318,  294,
          288,  309,  323,  336,  332,  317,  302,  287,
          273,  293,  306,  310,  309,  302,  280,  285,
          253,  260,  289,  293,  290,  278,  265,  232},

          //Bishop
        {
                306,  339,  345,  344,  347,  329,  339,  305,
                302,  322,  326,  334,  318,  320,  323,  298,
                333,  327,  338,  323,  330,  331,  324,  318,
                328,  345,  339,  351,  343,  340,  340,  325,
                320,  342,  350,  345,  345,  343,  335,  306,
                319,  331,  342,  342,  346,  340,  320,  308,
                313,  316,  312,  330,  332,  316,  321,  284,
                300,  314,  295,  319,  312,  316,  288,  270},

           //Rook
         { 598,  612,  620,  616,  606,  618,  621,  595,
           596,  608,  613,  603,  604,  591,  593,  576,
           600,  603,  603,  599,  588,  583,  580,  571,
           602,  601,  609,  604,  588,  585,  583,  577,
           592,  598,  600,  597,  592,  590,  577,  570,
           586,  585,  585,  589,  582,  574,  549,  553,
           581,  583,  583,  585,  575,  570,  559,  565,
           576,  584,  591,  589,  580,  576,  570,  568, },

               //Queen
        { 1061, 1094, 1112, 1098, 1097, 1097, 1030, 1045,
          1027, 1068, 1099, 1112, 1125, 1092, 1055, 1035,
          1036, 1052, 1092, 1095, 1110, 1085, 1041, 1033,
          1039, 1070, 1082, 1105, 1120, 1101, 1089, 1060,
          1038, 1062, 1080, 1099, 1094, 1089, 1060, 1044,
          1008, 1043, 1067, 1069, 1071, 1063, 1030, 1003,
          1000, 1018, 1023, 1032, 1037, 1002,  957,  857,
          992, 1009, 1018, 1021, 1015, 1006,  880,  846,},

                  //King
         { -40,  -32,  -23,    0,    0,    0,    0,    0,
           -36,    0,    2,    0,   13,   27,   33,    0,
           -22,   19,   28,   34,   45,   48,   50,    7,
           -22,   18,   32,   42,   44,   44,   30,    5,
           -27,    3,   25,   40,   43,   31,   17,   -5,
           -27,   -2,   13,   25,   23,   15,   -6,  -16,
           -40,  -24,  -14,   -5,    0,  -10,  -29,  -50,
           -72,  -71,  -50,  -32,  -58,  -33,  -63,  -91},
}};

constexpr std::array<std::array<std::array<int, 64>, 13>, 2> initPSQT() {
    std::array<std::array<std::array<int, 64>, 13>, 2> PSQT{};

    for (int piece = WHITE_PAWN; piece != NO_PIECE + 1; piece++) {
        for (int square = 0; square != 64; square++) {
            bool white = piece < BLACK_PAWN;
            int sq = square ^ (piece < BLACK_PAWN ? 63 : 7);
            int pt = typeOf(piece);
            int pvm = white ? PieceValuesMG[pt] : -PieceValuesMG[pt];
            int pve = white ? PieceValuesEG[pt] : -PieceValuesEG[pt];
            int pbm = white ? PieceSquareBonusesMG[pt][sq] : -PieceSquareBonusesMG[pt][sq];
            int pbe = white ? PieceSquareBonusesEG[pt][sq] : -PieceSquareBonusesEG[pt][sq];

            if (piece != 12) {
                PSQT[0][piece][square] = pvm + pbm;
                PSQT[1][piece][square] = pve + pbe;
            } else {
                PSQT[0][piece][square] = 0;
                PSQT[1][piece][square] = 0;
            }
        }
    }

    return PSQT;
}

constexpr std::array<std::array<std::array<int, 64>, 13>, 2> PSQT = initPSQT();

#endif //MOLYBDENUM_PSQT_H
