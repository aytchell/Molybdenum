#ifndef MOLYBDENUM_MAGICBITBOARDS_H
#define MOLYBDENUM_MAGICBITBOARDS_H

#include "BitStuff.h"
#include <cstring>

constexpr std::array<int, 64> bishopShifts =
        {58, 59, 59, 59, 59, 59, 59, 58,
         59, 59, 59, 59, 59, 59, 59, 59,
         59, 59, 57, 57, 57, 57, 59, 59,
         59, 59, 57, 55, 55, 57, 59, 59,
         59, 59, 57, 55, 55, 57, 59, 59,
         59, 59, 57, 57, 57, 57, 59, 59,
         59, 59, 59, 59, 59, 59, 59, 59,
         58, 59, 59, 59, 59, 59, 59, 58};

constexpr std::array<int, 64> rookShifts =
        {52, 53, 53, 53, 53, 53, 53, 52,
         53, 54, 54, 54, 54, 54, 54, 53,
         53, 54, 54, 54, 54, 54, 54, 53,
         53, 54, 54, 54, 54, 54, 54, 53,
         53, 54, 54, 54, 54, 54, 54, 53,
         53, 54, 54, 54, 54, 54, 54, 53,
         53, 54, 54, 54, 54, 54, 54, 53,
         52, 53, 53, 53, 53, 53, 53, 52};

//Magic numbers are hard coded to reduce startup time,
//they were generated by uncommenting the commented code in initMagics
constexpr std::array<u64, 64> bishopMagics {
        9368723111031087232ULL, 1153504434949489280ULL, 4036390750630461460ULL, 4036390750630461460ULL,
        37159241036947488ULL, 2623384201235530256ULL, 294220526910439426ULL, 5067803728545800ULL,
        1155182109171122688ULL, 14987983964513371264ULL, 2312321337126952960ULL, 8832080151040ULL,
        2306001923544711168ULL, 3170536409975488520ULL, 2594355143844577280ULL, 18015637742039040ULL,
        1173194368753338384ULL, 4558592724208642ULL, 145241809540358658ULL, 37155281062342656ULL,
        563517428139530ULL, 281483583488256ULL, 1197645196953600ULL, 35330478310464ULL,
        9250411508662567168ULL, 4616489028848587265ULL, 1153071039287264256ULL, 151442333597438208ULL,
        4684025156178329600ULL, 211666864214032ULL, 289356903415418920ULL, 901284146809210882ULL,
        2022133868513985088ULL, 2256267654209801ULL, 1152983094438395976ULL, 144117389248168065ULL,
        18086966823878784ULL, 2342435074013987200ULL, 577028174391613476ULL, 164430042238108160ULL,
        4915688958404332032ULL, 288303018074477060ULL, 145276839315656704ULL, 288232858777027712ULL,
        283811875455232ULL, 457416181301376ULL, 74318229069152458ULL, 9296036569993449504ULL,
        73184052426833928ULL, 2815371598370952ULL, 2815371598370952ULL, 562951060850688ULL,
        9315492313505826ULL, 11970638777510068224ULL, 5191058346249158724ULL, 725081782253388808ULL,
        2306143210382690304ULL, 576606248917602306ULL, 2666130988001698818ULL, 2594082323347669509ULL,
        14503002599371849988ULL, 612648158303944960ULL, 2305878249688839426ULL, 4629709247398032448ULL
};

constexpr std::array<u64, 64> rookMagics {
        36033350758044036ULL, 4665729491249668098ULL, 1188985490465882240ULL, 72075186442082336ULL,
        4683761226126721106ULL, 108087645195735552ULL, 11601308451543908364ULL, 9583666604655346432ULL,
        614319205931548800ULL, 70386460938244ULL, 72198468973629440ULL, 9223653546459799808ULL,
        9224779433238855760ULL, 11822017774879816ULL, 54184212189806720ULL, 577023706627571906ULL,
        312015561593012228ULL, 72128237928456192ULL, 7205971610073890836ULL, 1180225677433507840ULL,
        4786174183342226ULL, 4611968593117061640ULL, 576544315221737736ULL, 720586936409932036ULL,
        2298531205398528ULL, 5765240843881414796ULL, 17905720754432ULL, 153414866014576704ULL,
        440908462168064ULL, 6918091986184963344ULL, 2305854021509941264ULL, 4901183034121801984ULL,
        2305896060658123136ULL, 70506195718146ULL, 153122937631674368ULL, 290482519571171969ULL,
        9223380835380495616ULL, 72480227418186752ULL, 2314855740453421584ULL, 18229943624269889ULL,
        72774750566514688ULL, 4503875042721794ULL, 5201657724365971456ULL, 9297539060793376ULL,
        1127549308534788ULL, 1167276762980220930ULL, 361202724372514ULL, 10385301032782659585ULL,
        9799973530943635712ULL, 4616189755506294976ULL, 5765874229218115712ULL, 731984475244724352ULL,
        9223653683663999232ULL, 576601841987747968ULL, 1152948099082953728ULL, 281477128388672ULL,
        612490659573613585ULL, 6790869445378066ULL, 9008299857437203ULL, 563655001260050ULL,
        653584965182949514ULL, 13837872873903170562ULL, 2305860612439671044ULL, 9223512915204833410ULL
};

struct MagicArrays {
    std::array<u64, 64> magics;
    std::array<std::array<u64, 4096>, 64> table;
};

template<Slider Type, bool MASK>
constexpr u64 getSliderAttacks(int square, u64 blocker) {
    constexpr bool ISROOK = Type == ROOK_S;
    u64 squareL = 1ULL << square;
    u64 stop = (((~lFIleOf(square) & edgeFiles) | (~lRankOf(square) & promotionRanks)) | blocker) & ~squareL;
    u64 attacks = 0;
    int shift1 = 7;
    int shift2 = 9;

    if (ISROOK) {
        shift1 = 1;
        shift2 = 8;
    }

    u64 bit = squareL;
    while ((bit & ~stop) && ((ISROOK && !(squareL & FILEA)) || (!ISROOK && !(squareL & FILEH)))) {
        bit <<= shift1;
        attacks |= bit;
    }

    bit = squareL;
    while (bit & ~stop && (ISROOK || !(squareL & FILEA))) {
        bit <<= shift2;
        attacks |= bit;
    }

    bit = squareL;
    while (bit & ~stop && (ISROOK || !(squareL & FILEH))) {
        bit >>= shift2;
        attacks |= bit;
    }

    bit = squareL;
    while (bit & ~stop && ((!ISROOK && !(squareL & FILEA)) || (ISROOK && !(squareL & FILEH)))) {
        bit >>= shift1;
        attacks |= bit;
    }

    if (MASK) {
        u64 edgeToRemove = 0ULL;
        u64 temp = 0;
        u64 fileOfRook = (FILEA >> fileOf(square));
        u64 rankOfRook = (RANK1 << rankOf(square) * 8);

        temp = fileOfRook & edgeFiles;
        if (temp)
            edgeToRemove |= edgeFiles & ~temp;
        else
            edgeToRemove |= edgeFiles;

        temp = rankOfRook & promotionRanks;
        if (temp)
            edgeToRemove |= promotionRanks & ~temp;
        else
            edgeToRemove |= promotionRanks;

        attacks &= ~edgeToRemove;
    }

    return attacks;
}

constexpr u64 randomULL(u64 seed){
    seed ^= (seed << 21);
    seed ^= (seed >> 35);
    seed ^= (seed << 4);
    return seed;
}

constexpr std::array<u64, 64> initBishopMasks() {
    std::array<u64, 64>mask = {};
    for (int i = 0; i != 64; i++)
        mask[i] = getSliderAttacks<BISHOP_S, true>(i, 0ULL);

    return mask;
}

constexpr std::array<u64, 64> initRookMasks() {
    std::array<u64, 64>mask = {};
    for (int i = 0; i != 64; i++)
        mask[i] = getSliderAttacks<ROOK_S, true>(i, 0ULL);

    return mask;
}

constexpr std::array<u64, 64> bishopMask = initBishopMasks();
constexpr std::array<u64, 64> rookMask   = initRookMasks();


template <Slider TYPE>
MagicArrays initMagics() {
    constexpr bool ISROOK = TYPE == ROOK_S;

    std::array<int, 64> shifts = ISROOK ? rookShifts : bishopShifts;
    std::array<u64, 64> masks  = ISROOK ? rookMask   :   bishopMask;
    std::array<u64, 64> magics = ISROOK ? rookMagics : bishopMagics;
    MagicArrays returnThis = {};

    //u64 random1 = randomULL(0x5F10752);
    //u64 random2 = randomULL(0xBA5E16);
    //u64 random3 = randomULL(0x5EED3);

    for (int square = 0; square != 64; square++) {
        bool done = false;
        u64 mask = masks[square];

        while (!done) {
            int loopCount = 0;
            //u64 possibleMagic = random3 & random2 & random1;
            u64 possibleMagic = magics[square];
            u64 blockers = 0;
            returnThis.table[square] = {0ULL};
            returnThis.magics[square] = possibleMagic;

            do {
                u64 idx = ((mask & blockers) * possibleMagic) >> shifts[square];
                u64 attacks = getSliderAttacks<TYPE, false>(square, blockers);
                loopCount++;

                if (returnThis.table[square][idx] == attacks || returnThis.table[square][idx] == 0ULL) {
                    returnThis.table[square][idx] = attacks;
                    blockers = (blockers - mask) & mask;
                } else {
                    //random1 = randomULL(random1);
                    //random2 = randomULL(random2);
                    //random3 = randomULL(random3);
                    break;
                }
            } while (blockers);

            if (loopCount >= int(1ULL << ((64 - shifts[square]))) - 1)
                done = true;
        }
        //std::cout << returnThis.magics[square] << "ULL, ";
        //if (square % 4 == 3)
        //    std::cout << "\n";
    }

    return returnThis;
}

#endif //MOLYBDENUM_MAGICBITBOARDS_H
